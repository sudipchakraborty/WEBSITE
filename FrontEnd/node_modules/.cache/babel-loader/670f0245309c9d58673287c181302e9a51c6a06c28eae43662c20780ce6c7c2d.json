{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Line}from\"react-chartjs-2\";import{Chart as ChartJS,LineElement,PointElement,CategoryScale,LinearScale,Title,Tooltip,Legend}from\"chart.js\";import\"./LiveCurveCard.css\";// Register required Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(LineElement,PointElement,CategoryScale,LinearScale,Title,Tooltip,Legend);const LiveCurveCard=()=>{const[dataPoints,setDataPoints]=useState([]);const[labels,setLabels]=useState([]);// Function to simulate live data fetching\nconst fetchLiveData=()=>{const newPoint=Math.random()*100;// Random data point\nconst currentTime=new Date().toLocaleTimeString();// Current time as label\n// Update state with new data\nsetDataPoints(prevData=>[...prevData,newPoint].slice(-10));// Keep the last 10 points\nsetLabels(prevLabels=>[...prevLabels,currentTime].slice(-10));// Keep the last 10 labels\n};// Fetch live data every 2 seconds\nuseEffect(()=>{const interval=setInterval(()=>{fetchLiveData();},2000);return()=>clearInterval(interval);// Cleanup interval on unmount\n},[]);// Chart.js data configuration\nconst chartData={labels:labels,datasets:[{label:\"Live Data\",data:dataPoints,borderColor:\"rgba(75,192,192,1)\",backgroundColor:\"rgba(75,192,192,0.2)\",tension:0.4,// Line tension for smoothing\nfill:false// Disable fill under the line\n}]};return/*#__PURE__*/_jsxs(\"div\",{className:\"live-curve-card\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"card-title\",children:\"Live Data Curve\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:/*#__PURE__*/_jsx(Line,{data:chartData,options:{responsive:true}})})]});};export default LiveCurveCard;","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","PointElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","LiveCurveCard","dataPoints","setDataPoints","labels","setLabels","fetchLiveData","newPoint","Math","random","currentTime","Date","toLocaleTimeString","prevData","slice","prevLabels","interval","setInterval","clearInterval","chartData","datasets","label","data","borderColor","backgroundColor","tension","fill","className","children","options","responsive"],"sources":["D:/PROJECT_ON_Github/Hyperledger-Fabric/FrontEnd/src/components/LiveCurveCard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  PointElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport \"./LiveCurveCard.css\";\r\n\r\n// Register required Chart.js components\r\nChartJS.register(\r\n  LineElement,\r\n  PointElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst LiveCurveCard = () => {\r\n  const [dataPoints, setDataPoints] = useState([]);\r\n  const [labels, setLabels] = useState([]);\r\n\r\n  // Function to simulate live data fetching\r\n  const fetchLiveData = () => {\r\n    const newPoint = Math.random() * 100; // Random data point\r\n    const currentTime = new Date().toLocaleTimeString(); // Current time as label\r\n\r\n    // Update state with new data\r\n    setDataPoints((prevData) => [...prevData, newPoint].slice(-10)); // Keep the last 10 points\r\n    setLabels((prevLabels) => [...prevLabels, currentTime].slice(-10)); // Keep the last 10 labels\r\n  };\r\n\r\n  // Fetch live data every 2 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      fetchLiveData();\r\n    }, 2000);\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, []);\r\n\r\n  // Chart.js data configuration\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Live Data\",\r\n        data: dataPoints,\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        tension: 0.4, // Line tension for smoothing\r\n        fill: false, // Disable fill under the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"live-curve-card\">\r\n      <h3 className=\"card-title\">Live Data Curve</h3>\r\n      <div className=\"chart-container\">\r\n        <Line data={chartData} options={{ responsive: true }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveCurveCard;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OACEC,KAAK,GAAI,CAAAC,OAAO,CAChBC,WAAW,CACXC,YAAY,CACZC,aAAa,CACbC,WAAW,CACXC,KAAK,CACLC,OAAO,CACPC,MAAM,KACD,UAAU,CACjB,MAAO,qBAAqB,CAE5B;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACAX,OAAO,CAACY,QAAQ,CACdX,WAAW,CACXC,YAAY,CACZC,aAAa,CACbC,WAAW,CACXC,KAAK,CACLC,OAAO,CACPC,MACF,CAAC,CAED,KAAM,CAAAM,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACmB,MAAM,CAAEC,SAAS,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAExC;AACA,KAAM,CAAAqB,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAE;AACtC,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAE;AAErD;AACAT,aAAa,CAAEU,QAAQ,EAAK,CAAC,GAAGA,QAAQ,CAAEN,QAAQ,CAAC,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;AACjET,SAAS,CAAEU,UAAU,EAAK,CAAC,GAAGA,UAAU,CAAEL,WAAW,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;AACtE,CAAC,CAED;AACA9B,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCX,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMY,aAAa,CAACF,QAAQ,CAAC,CAAE;AACxC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,SAAS,CAAG,CAChBf,MAAM,CAAEA,MAAM,CACdgB,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,WAAW,CAClBC,IAAI,CAAEpB,UAAU,CAChBqB,WAAW,CAAE,oBAAoB,CACjCC,eAAe,CAAE,sBAAsB,CACvCC,OAAO,CAAE,GAAG,CAAE;AACdC,IAAI,CAAE,KAAO;AACf,CAAC,CAEL,CAAC,CAED,mBACE3B,KAAA,QAAK4B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B/B,IAAA,OAAI8B,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,iBAAe,CAAI,CAAC,cAC/C/B,IAAA,QAAK8B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9B/B,IAAA,CAACX,IAAI,EAACoC,IAAI,CAAEH,SAAU,CAACU,OAAO,CAAE,CAAEC,UAAU,CAAE,IAAK,CAAE,CAAE,CAAC,CACrD,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAA7B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}