{"ast":null,"code":"import axios from'axios';// Create Axios instance\nconst apiClient=axios.create({// baseURL: 'http://192.168.31.196:5000/api',\nbaseURL:'http://192.168.31.196:3000/v1/',headers:{'Content-Type':'application/json'}});// Add a request interceptor to include the token in the Authorization header\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');// Retrieve token from storage\nif(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});export default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject"],"sources":["D:/PROJECT_ON_Github/Hyperledger-Fabric/FrontEnd/src/communication/apiClient.js"],"sourcesContent":["import axios from 'axios';\n\n// Create Axios instance\nconst apiClient = axios.create({\n  // baseURL: 'http://192.168.31.196:5000/api',\n  baseURL: 'http://192.168.31.196:3000/v1/',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the token in the Authorization header\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken'); // Retrieve token from storage\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\nexport default apiClient;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,MAAM,CAAC,CAC7B;AACAC,OAAO,CAAE,gCAAgC,CACzCC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,CAC7C,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAE;AACjD,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,WAAAC,MAAA,CAAaJ,KAAK,CAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAGM,KAAK,EAAK,CACZ,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CAAC,CAAC,CAEF,cAAe,CAAAb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}