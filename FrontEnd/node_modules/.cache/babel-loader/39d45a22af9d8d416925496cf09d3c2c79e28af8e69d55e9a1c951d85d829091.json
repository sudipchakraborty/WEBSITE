{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECT_ON_Github\\\\Hyperledger-Fabric\\\\FrontEnd\\\\src\\\\components\\\\LiveCurveCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, PointElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\nimport \"./LiveCurveCard.css\";\n\n// Register required Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nconst LiveCurveCard = () => {\n  _s();\n  const [dataPoints, setDataPoints] = useState([]);\n  const [labels, setLabels] = useState([]);\n\n  // Function to simulate live data fetching\n  const fetchLiveData = () => {\n    const newPoint = Math.random() * 100; // Random data point\n    const currentTime = new Date().toLocaleTimeString(); // Current time as label\n\n    // Update state with new data\n    setDataPoints(prevData => [...prevData, newPoint].slice(-10)); // Keep the last 10 points\n    setLabels(prevLabels => [...prevLabels, currentTime].slice(-10)); // Keep the last 10 labels\n  };\n\n  // Fetch live data every 2 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchLiveData();\n    }, 2000);\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []);\n\n  // Chart.js data configuration\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: \"Live Data\",\n      data: dataPoints,\n      borderColor: \"rgba(75,192,192,1)\",\n      backgroundColor: \"rgba(75,192,192,0.2)\",\n      tension: 0.4,\n      // Line tension for smoothing\n      fill: false // Disable fill under the line\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"live-curve-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"card-title\",\n      children: \"Live Data Curve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveCurveCard, \"8NQKHUpa9pVA7Cr+AVlNwE9yAEQ=\");\n_c = LiveCurveCard;\nexport default LiveCurveCard;\nvar _c;\n$RefreshReg$(_c, \"LiveCurveCard\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","PointElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","LiveCurveCard","_s","dataPoints","setDataPoints","labels","setLabels","fetchLiveData","newPoint","Math","random","currentTime","Date","toLocaleTimeString","prevData","slice","prevLabels","interval","setInterval","clearInterval","chartData","datasets","label","data","borderColor","backgroundColor","tension","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","_c","$RefreshReg$"],"sources":["D:/PROJECT_ON_Github/Hyperledger-Fabric/FrontEnd/src/components/LiveCurveCard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  PointElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport \"./LiveCurveCard.css\";\r\n\r\n// Register required Chart.js components\r\nChartJS.register(\r\n  LineElement,\r\n  PointElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst LiveCurveCard = () => {\r\n  const [dataPoints, setDataPoints] = useState([]);\r\n  const [labels, setLabels] = useState([]);\r\n\r\n  // Function to simulate live data fetching\r\n  const fetchLiveData = () => {\r\n    const newPoint = Math.random() * 100; // Random data point\r\n    const currentTime = new Date().toLocaleTimeString(); // Current time as label\r\n\r\n    // Update state with new data\r\n    setDataPoints((prevData) => [...prevData, newPoint].slice(-10)); // Keep the last 10 points\r\n    setLabels((prevLabels) => [...prevLabels, currentTime].slice(-10)); // Keep the last 10 labels\r\n  };\r\n\r\n  // Fetch live data every 2 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      fetchLiveData();\r\n    }, 2000);\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, []);\r\n\r\n  // Chart.js data configuration\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Live Data\",\r\n        data: dataPoints,\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        tension: 0.4, // Line tension for smoothing\r\n        fill: false, // Disable fill under the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"live-curve-card\">\r\n      <h3 className=\"card-title\">Live Data Curve</h3>\r\n      <div className=\"chart-container\">\r\n        <Line data={chartData} options={{ responsive: true }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveCurveCard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,OAAO,qBAAqB;;AAE5B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CACdT,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IACtC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC,CAAC;;IAErD;IACAT,aAAa,CAAEU,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEN,QAAQ,CAAC,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjET,SAAS,CAAEU,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAEL,WAAW,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtE,CAAC;;EAED;EACA7B,SAAS,CAAC,MAAM;IACd,MAAM+B,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCX,aAAa,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,SAAS,GAAG;IAChBf,MAAM,EAAEA,MAAM;IACdgB,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAEpB,UAAU;MAChBqB,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE,sBAAsB;MACvCC,OAAO,EAAE,GAAG;MAAE;MACdC,IAAI,EAAE,KAAK,CAAE;IACf,CAAC;EAEL,CAAC;EAED,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B9B,OAAA;MAAI6B,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/ClC,OAAA;MAAK6B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9B9B,OAAA,CAACX,IAAI;QAACmC,IAAI,EAAEH,SAAU;QAACc,OAAO,EAAE;UAAEC,UAAU,EAAE;QAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA9CID,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AAgDnB,eAAeA,aAAa;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}